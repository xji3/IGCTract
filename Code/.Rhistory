source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
rm(list=ls())  # clean up workspace
library(biomaRt)
# TO install
# source("https://bioconductor.org/biocLite.R")
# biocLite("biomaRt")
sg.dup.data <- read.table("~/Downloads/genomicSuperDups", header = TRUE,
stringsAsFactors = FALSE)
mart <- useMart("ensembl")
datasets <- listDatasets(mart)
mart <- useDataset("hsapiens_gene_ensembl",mart)
all.filters <- listFilters(mart)
for(filter.num in 1:dim(all.filters)[1]){
if(grepl("Ortholog", all.filters[filter.num, 2]) | grepl("ortholog", all.filters[filter.num, 2])
| grepl("Paralog", all.filters[filter.num, 2]) | grepl("paralog", all.filters[filter.num, 2])){
print(paste(toString(filter.num), all.filters[filter.num, 1], all.filters[filter.num, 2]))
}
}
all.attributes <- listAttributes(mart)
for(filter.num in 1:dim(all.attributes)[1]){
if(grepl("Ortholog", all.attributes[filter.num, 2]) | grepl("ortholog", all.attributes[filter.num, 2])
| grepl("Paralog", all.attributes[filter.num, 2]) | grepl("paralog", all.attributes[filter.num, 2])){
print(paste(toString(filter.num), all.attributes[filter.num, 1], all.attributes[filter.num, 2]))
}
}
#listEnsembl()
# Now construct a list of ensembl ids that are located within segmental duplication regions
search.flanking <- 1E3
sg.gene.pair.list <- "~/GitFolders/PrimateMultigeneFamilySearch/Seg_Dup_Gene_Pairs.txt"
if (file.exists(sg.gene.pair.list)){
sg.gene.pairs <- read.table(sg.gene.pair.list, stringsAsFactors = FALSE)[, 1]
}else{
sg.gene.pairs <- NULL
for (row.num in 1:dim(sg.dup.data)[1]){
dup1_genes <-
getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position',
"hsapiens_paralog_ensembl_gene", "hsapiens_paralog_associated_gene_name",
"hsapiens_paralog_chromosome", "hsapiens_paralog_chrom_start", "hsapiens_paralog_chrom_end"),
filters = c('chromosome_name', "start", "end"),
values = list(substring(sg.dup.data[row.num, "chrom"], 4),
sg.dup.data[row.num, "chromStart"] - search.flanking,
sg.dup.data[row.num, "chromEnd"] + search.flanking), mart = mart)
if (dim(dup1_genes)[1] > 0){
for (gene.num in 1:dim(dup1_genes)[1]){
ensembl.id <- dup1_genes[gene.num, "ensembl_gene_id"]
paralog.gene.id <- dup1_genes[gene.num, "hsapiens_paralog_ensembl_gene"]
paralog.gene.chrm <- dup1_genes[gene.num, "hsapiens_paralog_chromosome"]
paralog.gene.start <- dup1_genes[gene.num, "hsapiens_paralog_chrom_start"]
paralog.gene.end <- dup1_genes[gene.num, "hsapiens_paralog_chrom_end"]
if (paralog.gene.id != "" & ! is.na(paralog.gene.id)){
if( paralog.gene.chrm == substring(sg.dup.data[row.num, "otherChrom"], 4) &
paralog.gene.start > sg.dup.data[row.num, "otherStart"] - search.flanking &
paralog.gene.end < sg.dup.data[row.num, "otherEnd"] + search.flanking){
if(as.numeric(substring(ensembl.id, 5)) < as.numeric(substring(paralog.gene.id, 5))){
gene.pair <- paste(ensembl.id, paralog.gene.id, sep = "_")
}else{
gene.pair <- paste(paralog.gene.id, ensembl.id, sep = "_")
}
sg.gene.pairs <- sort(unique(c(sg.gene.pairs, gene.pair)))
}
}
}
}
if (row.num %% 1000 == 0){
print(paste(toString(round(row.num / dim(sg.dup.data)[1]  * 100, 2)), "%", sep = ""))
}
}
write.table(sg.gene.pairs,
sg.gene.pair.list, sep = "/n",
row.names = FALSE, col.names = FALSE)
}
rm(list=ls())  # clean up workspace
library(biomaRt)
# TO install
# source("https://bioconductor.org/biocLite.R")
# biocLite("biomaRt")
sg.dup.data <- read.table("~/Downloads/genomicSuperDups", header = TRUE,
stringsAsFactors = FALSE)
mart <- useMart("ensembl")
datasets <- listDatasets(mart)
mart <- useDataset("hsapiens_gene_ensembl",mart)
all.filters <- listFilters(mart)
for(filter.num in 1:dim(all.filters)[1]){
if(grepl("Ortholog", all.filters[filter.num, 2]) | grepl("ortholog", all.filters[filter.num, 2])
| grepl("Paralog", all.filters[filter.num, 2]) | grepl("paralog", all.filters[filter.num, 2])){
print(paste(toString(filter.num), all.filters[filter.num, 1], all.filters[filter.num, 2]))
}
}
all.attributes <- listAttributes(mart)
for(filter.num in 1:dim(all.attributes)[1]){
if(grepl("Ortholog", all.attributes[filter.num, 2]) | grepl("ortholog", all.attributes[filter.num, 2])
| grepl("Paralog", all.attributes[filter.num, 2]) | grepl("paralog", all.attributes[filter.num, 2])){
print(paste(toString(filter.num), all.attributes[filter.num, 1], all.attributes[filter.num, 2]))
}
}
#listEnsembl()
# Now construct a list of ensembl ids that are located within segmental duplication regions
search.flanking <- 1E3
sg.gene.pair.list <- "~/GitFolders/PrimateMultigeneFamilySearch/Seg_Dup_Gene_Pairs.txt"
if (file.exists(sg.gene.pair.list)){
sg.gene.pairs <- read.table(sg.gene.pair.list, stringsAsFactors = FALSE)[, 1]
}else{
sg.gene.pairs <- NULL
for (row.num in 1:dim(sg.dup.data)[1]){
dup1_genes <-
getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position',
"hsapiens_paralog_ensembl_gene", "hsapiens_paralog_associated_gene_name",
"hsapiens_paralog_chromosome", "hsapiens_paralog_chrom_start", "hsapiens_paralog_chrom_end"),
filters = c('chromosome_name', "start", "end"),
values = list(substring(sg.dup.data[row.num, "chrom"], 4),
sg.dup.data[row.num, "chromStart"] - search.flanking,
sg.dup.data[row.num, "chromEnd"] + search.flanking), mart = mart)
if (dim(dup1_genes)[1] > 0){
for (gene.num in 1:dim(dup1_genes)[1]){
ensembl.id <- dup1_genes[gene.num, "ensembl_gene_id"]
paralog.gene.id <- dup1_genes[gene.num, "hsapiens_paralog_ensembl_gene"]
paralog.gene.chrm <- dup1_genes[gene.num, "hsapiens_paralog_chromosome"]
paralog.gene.start <- dup1_genes[gene.num, "hsapiens_paralog_chrom_start"]
paralog.gene.end <- dup1_genes[gene.num, "hsapiens_paralog_chrom_end"]
if (paralog.gene.id != "" & ! is.na(paralog.gene.id)){
if( paralog.gene.chrm == substring(sg.dup.data[row.num, "otherChrom"], 4) &
paralog.gene.start > sg.dup.data[row.num, "otherStart"] - search.flanking &
paralog.gene.end < sg.dup.data[row.num, "otherEnd"] + search.flanking){
if(as.numeric(substring(ensembl.id, 5)) < as.numeric(substring(paralog.gene.id, 5))){
gene.pair <- paste(ensembl.id, paralog.gene.id, sep = "_")
}else{
gene.pair <- paste(paralog.gene.id, ensembl.id, sep = "_")
}
sg.gene.pairs <- sort(unique(c(sg.gene.pairs, gene.pair)))
}
}
}
}
if (row.num %% 1000 == 0){
print(paste(toString(round(row.num / dim(sg.dup.data)[1]  * 100, 2)), "%", sep = ""))
}
}
write.table(sg.gene.pairs,
sg.gene.pair.list, sep = "/n",
row.names = FALSE, col.names = FALSE)
}
# Chunk 1
rm(list=ls())  # clean up workspace
library(biomaRt)
# TO install
#source("https://bioconductor.org/biocLite.R")
#biocLite("biomaRt")
mart <- useMart("ensembl")
datasets <- listDatasets(mart)
# Here are the datasets for the selected species
selected.datasets <- c("hsapiens_gene_ensembl",        # Homo sapiens (Human)
"ptroglodytes_gene_ensembl",    # Pan troglodytes (Chimpanzee)
"ggorilla_gene_ensembl",        # Gorilla gorilla (Gorilla)
"pabelii_gene_ensembl",         # Pongo abelii (Orangutan)
"nleucogenys_gene_ensembl",     # Nomascus leucogenys (Gibbon)
"csabaeus_gene_ensembl",        # Chlorocebus sabaeus (Vervet-AGM)
"panubis_gene_ensembl",         # Papio anubis (Olive Baboon)
"mmulatta_gene_ensembl",        # Macaca mulatta (Macaque)
"tsyrichta_gene_ensembl",       # Tarsius syrichta (Tarsier)
"mmurinus_gene_ensembl",        # Microcebus murinus (Mouse Lemur)
"ogarnettii_gene_ensembl",      # Otolemur garnettii (Bushbaby)
"mmusculus_gene_ensembl",       # Mus musculus (Mouse)
"tbelangeri_gene_ensembl"       # Tupaia belangeri (Tree Threw)
)
spe.mart <- useDataset(selected.datasets[1],mart)
listFilters(spe.mart)
getBM(attributes=
c(# Chimpanzee
"ptroglodytes_homolog_ensembl_gene", "ptroglodytes_homolog_chromosome", "ptroglodytes_homolog_chrom_start", "ptroglodytes_homolog_chrom_end",
# Gorilla
"ggorilla_homolog_ensembl_gene", "ggorilla_homolog_chromosome", "ggorilla_homolog_chrom_start", "ggorilla_homolog_chrom_end",
# Orangutan
"pabelii_homolog_ensembl_gene", "pabelii_homolog_chromosome", "pabelii_homolog_chrom_start", "pabelii_homolog_chrom_end",
# Gibbon
"nleucogenys_homolog_ensembl_gene", "nleucogenys_homolog_chromosome", "nleucogenys_homolog_chrom_start", "nleucogenys_homolog_chrom_end"
),
filters = c('external_gene_name'),
values = "ADH1C", mart = spe.mart)
### Ensembl id for Human ADH1 genes
# ENSG00000187758   ADH1A
# ENSG00000196616   ADH1B
# ENSG00000248144   ADH1C
# Chunk 1
rm(list=ls())  # clean up workspace
setwd("/Users/Xiang/GitFolders/ADH1Genes/Code/")
seq.case <- "all_exon"
top.case <- "P1"
d1 <- 0
P1.summary.mat <- NULL
for(d2 in 0:1){
for(d3 in 0:2){
for(d4 in 0:3){
for(l1 in 0:2){
dup.los.case <- paste("D", paste(as.character(c(d2, d3, d4)), collapse = ""),
"L", as.character(l1), sep = "")
summary.file.name <- paste(top.case, "ADH1", seq.case, dup.los.case,
"summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = dup.los.case))
#         assign(paste(top.case, "ADH1", seq.case, dup.los.case,
#                      "summary", sep = "_"), summary_mat)
P1.summary.mat <- cbind(P1.summary.mat, summary_mat)
}
}
}
}
top.case <- "Test"
Test.summary.mat <- NULL
for(d2 in 0:1){
for(d3 in 0:2){
for(d4 in 0:3){
for(l1 in 0:2){
dup.los.case <- paste("D", paste(as.character(c(d2, d3, d4)), collapse = ""),
"L", as.character(l1), sep = "")
summary.file.name <- paste(top.case, "ADH1", seq.case, dup.los.case,
"summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = dup.los.case))
#         assign(paste(top.case, "ADH1", seq.case, dup.los.case,
#                      "summary", sep = "_"), summary_mat)
Test.summary.mat <- cbind(Test.summary.mat, summary_mat)
}
}
}
}
# Chunk 1
rm(list=ls())  # clean up workspace
#setwd("/Users/Xiang/GitFolders/ADH1Genes/Code/")
seq.case <- "all_exon"
top.case <- "P1"
d1 <- 0
P1.summary.mat <- NULL
Force.P1.summary.mat <- NULL
for(d2 in 0:1){
for(d3 in 0:2){
for(d4 in 0:3){
for(l1 in 0:3){
dup.los.case <- paste("D", paste(as.character(c(d2, d3, d4)), collapse = ""),
"L", as.character(l1), sep = "")
summary.file.name <- paste(top.case, "ADH1", seq.case, dup.los.case,
"summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = dup.los.case))
#         assign(paste(top.case, "ADH1", seq.case, dup.los.case,
#                      "summary", sep = "_"), summary_mat)
length(summary_mat) <- 61
P1.summary.mat <- cbind(P1.summary.mat, summary_mat)
summary.file.name <- paste("Force", top.case, "ADH1", seq.case, dup.los.case,
"summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = dup.los.case))
#         assign(paste(top.case, "ADH1", seq.case, dup.los.case,
#                      "summary", sep = "_"), summary_mat)
length(summary_mat) <- 61
Force.P1.summary.mat <- cbind(Force.P1.summary.mat, summary_mat)
}
}
}
}
top.case <- "Test"
Test.summary.mat <- NULL
for(d2 in 0:1){
for(d3 in 0:2){
for(d4 in 0:3){
for(l1 in 0:3){
dup.los.case <- paste("D", paste(as.character(c(d2, d3, d4)), collapse = ""),
"L", as.character(l1), sep = "")
summary.file.name <- paste(top.case, "ADH1", seq.case, dup.los.case,
"summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = dup.los.case))
#         assign(paste(top.case, "ADH1", seq.case, dup.los.case,
#                      "summary", sep = "_"), summary_mat)
Test.summary.mat <- cbind(Test.summary.mat, summary_mat)
}
}
}
}
save.image(file = "ADH1.RData")
# Chunk 2
plot(Test.summary.mat["ll", ])
axis(side = 1, at = seq(4, 96, 4))
# Now show column names
colnames(Test.summary.mat)
plot(P1.summary.mat["ll",])
axis(side = 1, at = seq(4, 96, 4))
# Now show column names
colnames(P1.summary.mat)
# Chunk 1
rm(list=ls())  # clean up workspace
setwd("/Users/xji3/GitFolders/YeastIGCTract/Code/")
finished.pairs <- readLines('./Finished_Pairs.txt')
JS.HKY.nonclock.summary <- NULL
PSJS.HKY.nonclock.summary <- NULL
for(pair in finished.pairs){
summary.file.name <- paste("JS_HKY", pair, "One_rate_nonclock_summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = pair))
JS.HKY.nonclock.summary <- cbind(JS.HKY.nonclock.summary, summary_mat)
summary.file.name <- paste("PSJS_HKY", pair, "One_rate_nonclock_summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = pair))
PSJS.HKY.nonclock.summary <- cbind(PSJS.HKY.nonclock.summary, summary_mat)
}
# Chunk 2
# Estimated Tract length (unit: nucleotide)
PSJS.HKY.nonclock.summary["tract_length", ]
# initial guess tract length
JS.HKY.nonclock.summary["Tau",] / exp(-0.6)
# Initiation rate
PSJS.HKY.nonclock.summary["init_rate", ]
# Now compare the product of init_rate and tract length with IGC+HKY model estimated Tau value
illustract.mat <- rbind(PSJS.HKY.nonclock.summary['init_rate', ] * PSJS.HKY.nonclock.summary["tract_length", ], JS.HKY.nonclock.summary['Tau',])
row.names(illustract.mat) <- c('product', 'estimated Tau')
illustract.mat
# Chunk 3
library("lattice")
plot.pairs <- c("YLR333C_YGR027C", "YLR406C_YDL075W")
# show estimated tract length
PSJS.HKY.nonclock.summary["tract_length", plot.pairs]
for( pair in plot.pairs){
plot.file.name <- paste("./plot/", pair, "_PSJS_lnL_TractLength.txt", sep = "")
plot.data <- read.table(plot.file.name)
plot(plot.data[, 2], plot.data[, 3], xlab = "init rate", ylab = "lnL", main = pair)
assign(pair, plot.data)
plot.file.name <- paste("./plot/", pair, "_PSJS_lnL_TractLength_zoomed.txt", sep = "")
plot.data <- read.table(plot.file.name)
plot(plot.data[, 2], plot.data[, 3], xlab = "init rate", ylab = "lnL", main = paste(pair, "_zoomed", sep = ""))
assign(paste(pair, ".zoomed", sep = ""), plot.data)
}
x <- 1:12
y <- 5:19 * 0.1
z <- matrix(YLR333C_YGR027C[1 : (length(x) * length(y)), 3], nrow = length(x), ncol = length(y), byrow = TRUE)
wireframe(z, row.values = x, col.values = y, xlab = "tract length", ylab = "init rate", zlab = "lnL", main = "YLR333C_YGR027C")
z <- matrix(YLR406C_YDL075W[1 : (length(x) * length(y)), 3], nrow = length(x), ncol = length(y), byrow = TRUE)
wireframe(z, row.values = x, col.values = y, xlab = "tract length", ylab = "init rate", zlab = "lnL", main = "YLR406C_YDL075W")
#image(x, y, z)
# Chunk 4
# Now export data
save.image(file = "./TractSummary.RData")
z
plot(z[, 6])
plot(z[, 5])
