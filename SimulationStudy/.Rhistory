ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high))) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 2) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.2) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 2) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.1) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 2) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 2) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.8) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
#ggsave(paste(results.path, "estimated tau NOT respect boundary summary.pdf", sep = ""))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tau value NOT respect codon boundary")
ggsave("estimated Tract length constrain other parameters at their True values summary.pdf")
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tract length constrain other parameters at their True values")
ggsave("estimated Tract length constrain other parameters at their True values summary.pdf")
tract = 300
target_summary <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
col.names <- target_summary["tract_length", ] < 10*tract
hist(log(target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
length(col.names)
target_summary["tract_length", ]
sort(target_summary["tract_length", ])
10*tract
col.names <- colnames(target_summary)[target_summary["tract_length", ] < 10*tract]
length(col.names)
target_summary <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
col.names <- colnames(target_summary)[target_summary["tract_length", ] < 10*tract]
hist(log(target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
abline(v =  log(tract), col = 2)
cat(" Number of datasets: ", length(col.names), ". True Tract: ", tract, "\n Mean: ", mean(target_summary["tract_length", col.names]),
"sd: ", sd(target_summary["tract_length", col.names]))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
myplot = ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tract length constrain other parameters at their True values")
myplot +  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
myplot = ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tract length constrain other parameters at their True values")
myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave("estimated Tract length constrain other parameters at their True values summary.pdf")
rm(list=ls())  # clean up workspace
setwd("/Users/xji3/GitFolders/YeastIGCTract/SimulationStudy")
#setwd("/Users/Xiang/GitFolders/YeastIGCTract/SimulationStudy/")
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
guess.list <- c(50.0, 100.0, 250.0, 500.0)
# Now read in PSJS summary results
for(tract in Tract.list){
for(guess in guess.list){
PSJS.tract.summary <- NULL
for(sim in 1:100){
PSJS.summary <- paste("./summary/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/True_PSJS_HKY_rv_sim_',
toString(sim), "_Tract_", toString(tract), '.0_guess_',
toString(guess),'.0_nt_summary.txt', sep = "")
if (file.exists(PSJS.summary)){
all <- readLines(PSJS.summary, n = -1)
col.names <- paste("sim_", toString(sim), sep = "")
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(PSJS.summary,
row.names = row.names,
col.names = col.names))
PSJS.tract.summary <- cbind(PSJS.tract.summary, summary_mat)
}
}
assign(paste("True_PSJS_HKY_Tract_", toString(tract), "_guess_",
toString(guess), "_summary", sep = ""), PSJS.tract.summary)
}
}
# Now combine all initial guess results
for(tract in Tract.list){
combined.PSJS.tract.summary <- NULL
col.list <- NULL
for ( sim_num in 1:100){
sim_col <- paste("sim_", toString(sim_num), sep = "")
best.lnL <- -Inf
best.guess <- NULL
for(guess in guess.list){
target_summary <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_guess_", toString(guess), "_summary", sep = ""))
if(sim_col %in% colnames(target_summary) ){
if (target_summary["ll", sim_col] > best.lnL){
best.lnL <- target_summary["ll", sim_col]
best.guess <- guess
}
}
}
if(! is.null(best.guess)){
combined.PSJS.tract.summary <- cbind(combined.PSJS.tract.summary,
get(paste("True_PSJS_HKY_Tract_", toString(tract), "_guess_", toString(best.guess), "_summary", sep = ""))[, sim_col])
col.list <- c(col.list, sim_col)
}
}
colnames(combined.PSJS.tract.summary) <- col.list
assign(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""), combined.PSJS.tract.summary)
}
# from plots
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
hmm.tract.plots <- NULL
for(sim in 1:100){
hmm.plot <- paste("./plot/Tract_", toString(tract), '.0_HKY/sim_',
toString(sim), '/True_HMM_YDR418W_YEL054C_HKY_rv_lnL_sim_',
toString(sim), '_1D_surface.txt', sep = "")
if (file.exists(hmm.plot)){
lnL.surface <- read.table(hmm.plot)
max.idx <- which.max(lnL.surface[, 2])
new.summary <- matrix(c(3.0*exp(-lnL.surface[max.idx, 1]), lnL.surface[max.idx, 2]), 2, 1)
rownames(new.summary) <- c("tract in nt", "lnL")
colnames(new.summary) <- paste("sim_", toString(sim), sep = "")
hmm.tract.plots <- cbind(hmm.tract.plots, new.summary)
}
}
assign(paste("True_HMM_Tract_", toString(tract), "_plot", sep = ""), hmm.tract.plots)
}
Tract.list <- c(3.0, 10.0, 50.0, 100.0, 200.0, 300.0, 400.0, 500.0)
for(tract in Tract.list){
target_summary <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
col.names <- colnames(target_summary)[target_summary["tract_length", ] < 1E5]
#sim_info <- get(paste("sim.tract.", toString(tract), sep = ""))
hist(log(target_summary["tract_length", col.names]), breaks = 50,
main = paste("PSJS Estimated Tract length 1/p, Tract = ", toString(tract), ".0 ", sep = ""))
#abline(v =  realized.tract.dist(492, 1.0/tract)$mean, col = "blue")
abline(v =  log(tract), col = 2)
#abline(v =  mean(sim_info["mean subtract length", ]), col = "green")
cat(" Number of datasets: ", length(col.names), ". True Tract: ", tract, "\n Mean: ", mean(target_summary["tract_length", col.names]),
"sd: ", sd(target_summary["tract_length", col.names]))
}
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 1E5, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
myplot <- ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tau") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
ggtitle("estimated Tract length constrain other parameters at their True values")
myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave("estimated Tract length constrain other parameters at their True values summary.pdf")
save.image("./TrueValue.RData")
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
myplot <- ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tract length") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2) +
#ggtitle("estimated Tract length constrain other parameters at their True values")
myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
library(ggplot2)
tract.summary <- NULL
for (tract in Tract.list){
target <- get(paste("True_PSJS_HKY_Tract_", toString(tract), "_combined_summary", sep = ""))
tract.summary <- cbind(tract.summary, target["tract_length", ])
}
colnames(tract.summary) <- paste(Tract.list)
Plot.summary <- NULL
for (tract in Tract.list){
target <- tract.summary[tract.summary[, toString(tract)] < 10*tract, toString(tract)]
Plot.summary <- rbind(Plot.summary, c(tract, mean(target),
quantile(target, 0.125)[[1]],
quantile(target, 0.975)[[1]]))
}
colnames(Plot.summary) <- c("tract", "mean", "quantile_low", "quantile_high")
Plot.summary <- data.frame(Plot.summary)
myplot <- ggplot(Plot.summary, aes(x = log(tract), y= log(mean))) +
geom_errorbar(aes(ymin = log(quantile_low), ymax = log(quantile_high)), width = 0.05) +
#  geom_line() +
geom_point(shape = 21, fill = "black", size = 1.7) +
xlab("Expected tract length") +
ylab("Estimated tract length") +
#    xlim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
#    ylim(0.0, max(target[, "True_blen"], target[, "estimated_blen"] + target[, "se_of_blen"]) * 1.1) +
geom_abline(slope = 1.0, intercept = 0.0, lty = 2)
#ggtitle("estimated Tract length constrain other parameters at their True values")
myplot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggsave("estimated Tract length constrain other parameters at their True values summary.pdf")
rm(list=ls())  # clean up workspace
setwd("/Users/xji3/GitFolders/YeastIGCTract/PSJSAnalyses/")
filtered.pairs <- readLines('../Filtered_pairs.txt')
# Now read in individual summary of gene pairs
PSJS.HKY.rv.nonclock.summary.guess.1 <- NULL
PSJS.HKY.rv.nonclock.summary.guess.2 <- NULL
PSJS.HKY.rv.nonclock.summary.dim.1 <- NULL
for (pair in filtered.pairs){
summary.file.name <- paste("PSJS_HKY", pair, "One_rate_Guess_1_rv_SCOK_nonclock_summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
col.names <- pair
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = col.names))
PSJS.HKY.rv.nonclock.summary.guess.1 <- cbind(PSJS.HKY.rv.nonclock.summary.guess.1, summary_mat)
summary.file.name <- paste("PSJS_HKY", pair, "One_rate_Guess_2_rv_SCOK_nonclock_summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
col.names <- pair
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = col.names))
PSJS.HKY.rv.nonclock.summary.guess.2 <- cbind(PSJS.HKY.rv.nonclock.summary.guess.2, summary_mat)
summary.file.name <- paste("PSJS_dim_1_HKY", pair, "One_rate_init_30.0_rv_SCOK_nonclock_summary.txt", sep = "_")
summary_file <- paste("./summary/", summary.file.name, sep = "")
all <- readLines(summary_file, n = -1)
col.names <- pair
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
summary_mat <- as.matrix(read.table(summary_file,
row.names = row.names,
col.names = col.names))
PSJS.HKY.rv.nonclock.summary.dim.1 <- cbind(PSJS.HKY.rv.nonclock.summary.dim.1, summary_mat)
}
PSJS.HKY.rv.nonclock.summary.guess.1["tract_length", ]
PSJS.HKY.rv.nonclock.summary.guess.2["tract_length", ]
PSJS.HKY.rv.nonclock.summary.dim.1["tract_length", ]
View(PSJS.HKY.rv.nonclock.summary.dim.1)
cbind(PSJS.HKY.rv.nonclock.summary.dim.1["ll", ], PSJS.HKY.rv.nonclock.summary.guess.1["ll", ], PSJS.HKY.rv.nonclock.summary.guess.2["ll", ])
cbind(PSJS.HKY.rv.nonclock.summary.dim.1["ll", ], PSJS.HKY.rv.nonclock.summary.guess.1["ll", ], PSJS.HKY.rv.nonclock.summary.guess.2["ll", ], PSJS.HKY.rv.nonclock.summary.dim.1["tract_length", ], PSJS.HKY.rv.nonclock.summary.guess.1["tract_length", ], PSJS.HKY.rv.nonclock.summary.guess.2["tract_length", ])
